%% Numerical Optimisation Project 
% Name: Dylan Scotney 
% SN: 18138211
% Submission date: 09/04/2019

%%
% clear cache and variables 
clear cache variables
%% Simulating dataset 
theta = 0:0.1:2*pi;
% 4th column = 0 will later be used to store mapped values from kernels
scatter_circle = @(r, noise, class) [r * cos(theta) + noise(1,:);
                                     r * sin(theta) + noise(2,:);
                                     0*theta;
                                     class*ones(1,length(theta))];

% Generate random sets with norm distribution, acts as noise on sample
data_generator = rng(0,'v5normal');
noise1 = rand(2,length(theta));
noise2 = rand(2,length(theta));

dataset_p = scatter_circle(1, noise1, 1)';
dataset_m = scatter_circle(3, noise2, -1)';
dataset = [dataset_p; dataset_m];

% Plot data
figure(1)
hold on
scatter(dataset_p(:,1), dataset_p(:,2), 'o')
scatter(dataset_m(:,1), dataset_m(:,2), '*')
title("2D data set")
legend("y_i = 1", "y_i = -1")
grid on 
hold off

%% RADIAL BASIS KERNEL SOLUTION
%==========================================================================
%% Seperating dataset with Radial Basis kernel 
sigma = 2;
kernel = @(xi,xj) exp(-sqrt(sum((xi-xj).^2,2))/2*sigma^2);

for i = 1:length(dataset)
    % Store New Z values in 3th column
    dataset(i,3) = sum(kernel(dataset(i,1:2),dataset(:,1:2)));
end

split = length(dataset)/2;

figure(2)
scatter3(dataset(1:split, 1), dataset(1:split, 2), dataset(1:split,3), 'o');
hold on
scatter3(dataset(split+1:end, 1), dataset(split+1:end, 2), dataset(split+1:end,3), '*');
title("Radial Basis Kernel Mapping")
legend("y_i = 1", "y_i = -1")
hold off

%% Computing matrix H
H = zeros(length(dataset),length(dataset));
for i = 1:length(dataset)
    for j = 1:length(dataset)
        H(i,j) = dataset(i,4)*dataset(j,4)*dot(dataset(i,1:3), dataset(j,1:3));
    end
end

% We want to maximise sum(a) - a'*H*a s.t. sum(y*a) = 0 so define:
% Lagrangian 

H=[1,0;0,1];
b = [1;1];
F = @(a) sum(a) - 1/2 * a'*H*a;
df = @(a) 1 - H*a;
F(b)
df(b)

%% Seperating dataset with polynomial kernel
b=2; 
a=0;
kernel = @(xi, xj) (dot(xi,xj)+a)^b;

for j = 1:length(dataset)
    z2(j) = 0;
    for i = 1:length(dataset)
        z2(j) = z2(j) + kernel(dataset(j,1:2), dataset(i,1:2));
    end
end

split = length(dataset)/2;

figure(3)
scatter3(dataset(1:split, 1), dataset(1:split, 2), z2(1:split), 'o');
hold on
scatter3(dataset(split+1:end, 1), dataset(split+1:end, 2), z2(split+1:end), '*');
title("Sigmoidal Kernel Mapping")
legend("y_i = 1", "y_i = -1")
hold off









